<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dao.db2.lwaddress.Base_addrMapper">
    <resultMap id="BaseResultMap" type="com.dao.entity.lwaddress.Base_addr">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="addr_jj" property="addrJj" jdbcType="VARCHAR"/>
        <result column="addr_sj" property="addrSj" jdbcType="VARCHAR"/>
        <result column="addr_code" property="addrCode" jdbcType="VARCHAR"/>
        <result column="short_addr" property="shortAddr" jdbcType="VARCHAR"/>
        <result column="name1" property="name1" jdbcType="VARCHAR"/>
        <result column="name2" property="name2" jdbcType="VARCHAR"/>
        <result column="name3" property="name3" jdbcType="VARCHAR"/>
        <result column="id_card" property="idCard" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="pro_weight" property="proWeight" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="city_weight" property="cityWeight" jdbcType="VARCHAR"/>
        <result column="area" property="area" jdbcType="VARCHAR"/>
        <result column="area_weight" property="areaWeight" jdbcType="VARCHAR"/>
        <result column="street" property="street" jdbcType="VARCHAR"/>
        <result column="stre_weight" property="streWeight" jdbcType="VARCHAR"/>
        <result column="pc_weight" property="pcWeight" jdbcType="VARCHAR"/>
        <result column="alley" property="alley" jdbcType="VARCHAR"/>
        <result column="alley_num" property="alleyNum" jdbcType="VARCHAR"/>
        <result column="plot" property="plot" jdbcType="VARCHAR"/>
        <result column="building_num" property="buildingNum" jdbcType="VARCHAR"/>
        <result column="unit_num" property="unitNum" jdbcType="VARCHAR"/>
        <result column="floor_num" property="floorNum" jdbcType="VARCHAR"/>
        <result column="doorplate_num" property="doorplateNum" jdbcType="VARCHAR"/>
        <result column="merge_num" property="mergeNum" jdbcType="INTEGER"/>
        <result column="earliest_time" property="earliestTime" jdbcType="VARCHAR"/>
        <result column="latest_time" property="latestTime" jdbcType="VARCHAR"/>
        <result column="mul_weight" property="mulWeight" jdbcType="VARCHAR"/>
        <result column="str_score" property="strScore" jdbcType="VARCHAR"/>
        <result column="number_score" property="numberScore" jdbcType="VARCHAR"/>
        <result column="name_score" property="nameScore" jdbcType="VARCHAR"/>
        <result column="phone_score" property="phoneScore" jdbcType="VARCHAR"/>
        <result column="longitude" property="longitude" jdbcType="VARCHAR"/>
        <result column="latitude" property="latitude" jdbcType="VARCHAR"/>
        <result column="addr_sign1" property="addrSign1" jdbcType="VARCHAR"/>
        <result column="addr_sign2" property="addrSign2" jdbcType="VARCHAR"/>
        <result column="contrast_score" property="contrastScore" jdbcType="VARCHAR"/>
        <result column="contrast_id" property="contrastId" jdbcType="VARCHAR"/>
        <result column="p1type" property="p1type" jdbcType="INTEGER"/>
        <result column="p2type" property="p2type" jdbcType="INTEGER"/>
        <result column="p3type" property="p3type" jdbcType="INTEGER"/>
        <result column="p4type" property="p4type" jdbcType="INTEGER"/>
        <result column="p5type" property="p5type" jdbcType="INTEGER"/>
        <result column="total1" property="total1" jdbcType="VARCHAR"/>
        <result column="total2" property="total2" jdbcType="VARCHAR"/>
        <result column="total3" property="total3" jdbcType="VARCHAR"/>
        <result column="total4" property="total4" jdbcType="VARCHAR"/>
        <result column="total5" property="total5" jdbcType="VARCHAR"/>
        <result column="short_phone" property="shortPhone" jdbcType="VARCHAR"/>
        <result column="old_name1" property="oldName1" jdbcType="VARCHAR"/>
        <result column="old_phone" property="oldPhone" jdbcType="VARCHAR"/>
        <result column="row_id" property="rowId" jdbcType="INTEGER"/>
        <result column="table_name" property="tableName" jdbcType="VARCHAR"/>
        <result column="count_id" property="countId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, addr_jj, addr_sj, short_addr, name1, name2, name3,id_card, phone, province, pro_weight,
    city, city_weight, area, area_weight, street, stre_weight, pc_weight, mul_weight, 
    str_score, number_score, name_score, phone_score, longitude, latitude, addr_sign1, 
    addr_sign2, contrast_score, contrast_id, p1type, p2type, p3type, p4type, p5type, 
    total1, total2, total3, total4, total5, short_phone,old_name1,old_phone,row_id,table_name,count_id,create_time
  </sql>


    <insert id="insert1" parameterType="com.dao.entity.lwaddress.Base_addr" flushCache="true">
        insert  into sec_addr
        (id,addr_sj,short_addr,name1,phone,short_phone,addr_sign1,addr_sign2,province,pro_weight,id_card,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,p1type,old_name1,old_phone,row_id,table_name,count_id)
        values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id,jdbcType=VARCHAR},
            #{item.addrSj,jdbcType=VARCHAR},
            #{item.shortAddr,jdbcType=VARCHAR},
            #{item.name1,jdbcType=VARCHAR},
            #{item.idCard,jdbcType=VARCHAR},
            #{item.phone,jdbcType=VARCHAR},
            #{item.shortPhone,jdbcType=VARCHAR},
            #{item.addrSign1,jdbcType=VARCHAR},
            #{item.addrSign2,jdbcType=VARCHAR},
            #{item.province,jdbcType=VARCHAR},
            '${item.proWeight}',
            #{item.city,jdbcType=VARCHAR},
            '${item.cityWeight}',
            #{item.area,jdbcType=VARCHAR},
            '${item.areaWeight}',
            #{item.street,jdbcType=VARCHAR},
            '${item.streWeight}',
            '${item.mulWeight}',
            #{item.p1type,jdbcType=INTEGER},
            #{item.oldName1,jdbcType=VARCHAR},
            #{item.oldPhone,jdbcType=VARCHAR},
           #{item.rowId,jdbcType=INTEGER},
            #{item.tableName,jdbcType=VARCHAR},
            #{item.countId,jdbcType=INTEGER}
            )
        </foreach>

    </insert>

    <select id="selectFromInsertAddr_sj" resultMap="BaseResultMap" >
    SELECT id,addr_sj,name1,phone,short_phone,row_id,table_name  FROM insert_addr where count_id > #{number1} limit #{number2}
  </select>

    <select id="selectUseCondition" parameterType="java.lang.String" resultMap="BaseResultMap">
    select addr_sj,id FROM  base_addr
    where phone like #{phone}
  </select>



    <insert id="insert2" parameterType="com.dao.entity.lwaddress.Base_addr">

        insert into third_addr (id,latitude ,longitude,p4type)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=VARCHAR},
            #{item.latitude,jdbcType=VARCHAR},
            #{item.longitude,jdbcType=VARCHAR},
            #{item.p4type,jdbcType=INTEGER})
        </foreach>

    </insert>

    <insert id="insert3" parameterType="com.dao.entity.lwaddress.Base_addr">

        <!--<foreach collection="list" item="item" index="index" separator=";">-->
        insert   into merge_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,id_card,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,addr_sign1,addr_sign2,
        contrast_score,contrast_id,p2type,str_score,number_score,old_name1,old_phone,row_id,table_name,
        alley,alley_num,plot,building_num,unit_num,floor_num,doorplate_num,merge_num,
        earliest_time,latest_time,create_time)
        values
        (#{id,jdbcType=VARCHAR},
        #{addrSj,jdbcType=VARCHAR},
        #{shortAddr,jdbcType=VARCHAR},
        #{name1,jdbcType=VARCHAR},
        #{phone,jdbcType=VARCHAR},
        #{shortPhone,jdbcType=VARCHAR},
        #{province,jdbcType=VARCHAR},
        '${proWeight}',
        #{idCard,jdbcType=VARCHAR},
        #{city,jdbcType=VARCHAR},
        '${cityWeight}',
        #{area,jdbcType=VARCHAR},
        '${areaWeight}',
        #{street,jdbcType=VARCHAR},
        '${streWeight}',
        '${mulWeight}',
        #{addrSign1,jdbcType=VARCHAR},
        #{addrSign2,jdbcType=VARCHAR},
        '${contrastScore}',
        #{contrastId,jdbcType=VARCHAR},
        '${p2type}',
        #{strScore,jdbcType=VARCHAR},
        #{numberScore,jdbcType=VARCHAR},
        #{oldName1,jdbcType=VARCHAR},
        #{oldPhone,jdbcType=VARCHAR},
        #{rowId,jdbcType=INTEGER},
        #{tableName,jdbcType=VARCHAR},
        #{alley,jdbcType=VARCHAR},
        #{alleyNum,jdbcType=VARCHAR},
        #{plot,jdbcType=VARCHAR},
        #{buildingNum,jdbcType=VARCHAR},
        #{unitNum,jdbcType=VARCHAR},
        #{floorNum,jdbcType=VARCHAR},
        #{doorplateNum,jdbcType=VARCHAR},
        #{mergeNum,jdbcType=INTEGER},
        #{earliestTime,jdbcType=VARCHAR},
        #{latestTime,jdbcType=VARCHAR},
        #{createTime,jdbcType=VARCHAR}
        )
        <!--</foreach>-->

    </insert>

    <select id="selectByShortPhone" resultMap="BaseResultMap">
    SELECT  id,addr_sj,short_addr, name1,id_card, phone,province,pro_weight,
    city,city_weight,area,area_weight,street,stre_weight,mul_weight,
   p3type,short_phone,old_name1,old_phone,row_id,table_name,count_id,merge_num,earliest_time,latest_time,create_time
     FROM sec_addr
     <where>
        <if test="shortPhone == null">
            and short_phone is null
        </if>
        <if test="shortPhone != null">
            and short_phone = #{shortPhone}
        </if>
        <if test="city != null">
            and (city = #{city} or city is null)
        </if>
     </where>
      order by mul_weight desc

  </select>
    <select id="selectAddr_sj" resultMap="BaseResultMap">
    SELECT
            id,addr_sj,name1,phone,short_phone,row_id,table_name,
            count_id,id_card,merge_num,earliest_time,latest_time,create_time  FROM base_addr
    WHERE count_id &gt;= #{number1} and count_id &lt; #{number2}
  </select>

    <insert id="insert3_2" parameterType="com.dao.entity.lwaddress.Base_addr">
        insert   into merge_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,id_card,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,addr_sign1,addr_sign2,
        contrast_score,contrast_id,p2type,str_score,number_score,old_name1,old_phone,row_id,table_name,count_id)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=VARCHAR},
            #{item.addrSj,jdbcType=VARCHAR},
            #{item.shortAddr,jdbcType=VARCHAR},
            #{item.name1,jdbcType=VARCHAR},
            #{item.idCard,jdbcType=VARCHAR},
            #{item.phone,jdbcType=VARCHAR},
            #{item.shortPhone,jdbcType=VARCHAR},
            #{item.province,jdbcType=VARCHAR},
            '${item.proWeight}',
            #{item.city,jdbcType=VARCHAR},
            '${item.cityWeight}',
            #{item.area,jdbcType=VARCHAR},
            '${item.areaWeight}',
            #{item.street,jdbcType=VARCHAR},
            '${item.streWeight}',
            '${item.mulWeight}',
            #{item.addrSign1,jdbcType=VARCHAR},
            #{item.addrSign2,jdbcType=VARCHAR},
            #{item.contrastScore,jdbcType=VARCHAR},
            #{item.contrastId,jdbcType=VARCHAR},
            #{item.p2type,jdbcType=INTEGER},
            #{item.strScore,jdbcType=VARCHAR},
            #{item.numberScore,jdbcType=VARCHAR},
            #{item.oldName1,jdbcType=VARCHAR},
            #{item.oldPhone,jdbcType=VARCHAR},
           #{item.rowId,jdbcType=INTEGER},
            #{item.tableName,jdbcType=VARCHAR},
            #{item,countId,jdbcType=INTEGER}
            )
        </foreach>

    </insert>
    <insert id="insert4" parameterType="com.dao.entity.lwaddress.Base_addr">
        insert into index_addr
        (id,contrast_id)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=VARCHAR},
            #{item.contrastId,jdbcType=VARCHAR}
            )
        </foreach>

    </insert>


    <insert id="insert5" parameterType="com.dao.entity.lwaddress.Base_addr">

        <!--<foreach collection="list" item="item" index="index" separator=";">-->
        insert   into basics_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,id_card,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,
        p2type,p5type,addr_sign1,addr_sign2,number_score,old_name1,old_phone,row_id,table_name,
        alley,alley_num,plot,building_num,unit_num,floor_num,doorplate_num,merge_num,
        earliest_time,latest_time,create_time)
        values
        (#{id,jdbcType=VARCHAR},
        #{addrSj,jdbcType=VARCHAR},
        #{shortAddr,jdbcType=VARCHAR},
        #{name1,jdbcType=VARCHAR},
        #{phone,jdbcType=VARCHAR},
        #{shortPhone,jdbcType=VARCHAR},
        #{province,jdbcType=VARCHAR},
        '${proWeight}',
        #{idCard,jdbcType=VARCHAR},
        #{city,jdbcType=VARCHAR},
        '${cityWeight}',
        #{area,jdbcType=VARCHAR},
        '${areaWeight}',
        #{street,jdbcType=VARCHAR},
        '${streWeight}',
        '${mulWeight}',
        #{p2type,jdbcType=INTEGER},
        #{p5type,jdbcType=INTEGER},
        #{addrSign1,jdbcType=VARCHAR},
        #{addrSign2,jdbcType=VARCHAR},
        #{numberScore,jdbcType=VARCHAR},
        #{oldName1,jdbcType=VARCHAR},
        #{oldPhone,jdbcType=VARCHAR},
        #{rowId,jdbcType=INTEGER},
        #{tableName,jdbcType=VARCHAR},
        #{alley,jdbcType=VARCHAR},
        #{alleyNum,jdbcType=VARCHAR},
        #{plot,jdbcType=VARCHAR},
        #{buildingNum,jdbcType=VARCHAR},
        #{unitNum,jdbcType=VARCHAR},
        #{floorNum,jdbcType=VARCHAR},
        #{doorplateNum,jdbcType=VARCHAR},
        #{mergeNum,jdbcType=INTEGER},
        #{earliestTime,jdbcType=VARCHAR},
        #{latestTime,jdbcType=VARCHAR},
        #{createTime,jdbcType=VARCHAR}
        )
        <!--</foreach>-->

    </insert>
    <insert id="insert5_2" parameterType="com.dao.entity.lwaddress.Base_addr">
        insert   into basics_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,id_card,
        p2type,addr_sign1,addr_sign2,number_score,old_name1,old_phone,row_id,table_name,count_id)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=VARCHAR},
            #{item.addrSj,jdbcType=VARCHAR},
            #{item.shortAddr,jdbcType=VARCHAR},
            #{item.name1,jdbcType=VARCHAR},
            #{item.idCard,jdbcType=VARCHAR},
            #{item.phone,jdbcType=VARCHAR},
            #{item.shortPhone,jdbcType=VARCHAR},
            #{item.province,jdbcType=VARCHAR},
            '${item.proWeight}',
            #{item.city,jdbcType=VARCHAR},
            '${item.cityWeight}',
            #{item.area,jdbcType=VARCHAR},
            '${item.areaWeight}',
            #{item.street,jdbcType=VARCHAR},
            '${item.streWeight}',
            '${item.mulWeight}',
            #{item.p2type,jdbcType=INTEGER},
            #{item.addrSign1,jdbcType=VARCHAR},
            #{item.addrSign2,jdbcType=VARCHAR},
            #{item.numberScore,jdbcType=VARCHAR},
            #{item.oldName1,jdbcType=VARCHAR},
            #{item.oldPhone,jdbcType=VARCHAR},
           #{item.rowId,jdbcType=INTEGER},
            #{item.tableName,jdbcType=VARCHAR},
            #{item.countId,jdbcType=INTEGER}
            )
        </foreach>

    </insert>
    <insert id="insertBasics" parameterType="com.dao.entity.lwaddress.Base_addr">
        insert   into basics_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,addr_sign1,addr_sign2,id_card,
        contrast_score,contrast_id,p2type,str_score,number_score,old_name1,old_phone,row_id,table_name,count_id,create_time)
        values
            (#{id,jdbcType=VARCHAR},
            #{addrSj,jdbcType=VARCHAR},
            #{shortAddr,jdbcType=VARCHAR},
            #{name1,jdbcType=VARCHAR},
            #{idCard,jdbcType=VARCHAR},
            #{phone,jdbcType=VARCHAR},
            #{shortPhone,jdbcType=VARCHAR},
            #{province,jdbcType=VARCHAR},
            '${proWeight}',
            #{city,jdbcType=VARCHAR},
            '${cityWeight}',
            #{area,jdbcType=VARCHAR},
            '${areaWeight}',
            #{street,jdbcType=VARCHAR},
            '${streWeight}',
            '${mulWeight}',
            #{addrSign1,jdbcType=VARCHAR},
            #{addrSign2,jdbcType=VARCHAR},
            '${contrastScore}',
            #{contrastId,jdbcType=VARCHAR},
            #{p2type,jdbcType=INTEGER},
            #{strScore,jdbcType=VARCHAR},
            #{numberScore,jdbcType=VARCHAR},
            #{oldName1,jdbcType=VARCHAR},
            #{oldPhone,jdbcType=VARCHAR},
            #{rowId,jdbcType=INTEGER},
            #{tableName,jdbcType=VARCHAR},
            #{countId,jdbcType=INTEGER},
            #{createTime,jdbcType=VARCHAR}
            )
    </insert>
    <insert id="insertMerge" parameterType="com.dao.entity.lwaddress.Base_addr">
                insert   into merge_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,addr_sign1,addr_sign2,id_card,
        contrast_score,contrast_id,p2type,str_score,number_score,old_name1,old_phone,row_id,table_name,count_id,create_time)
        values
            (#{id,jdbcType=VARCHAR},
            #{addrSj,jdbcType=VARCHAR},
            #{shortAddr,jdbcType=VARCHAR},
            #{name1,jdbcType=VARCHAR},
            #{idCard,jdbcType=VARCHAR},
            #{phone,jdbcType=VARCHAR},
            #{shortPhone,jdbcType=VARCHAR},
            #{province,jdbcType=VARCHAR},
            '${proWeight}',
            #{city,jdbcType=VARCHAR},
            '${cityWeight}',
            #{area,jdbcType=VARCHAR},
            '${areaWeight}',
            #{street,jdbcType=VARCHAR},
            '${streWeight}',
            '${mulWeight}',
            #{addrSign1,jdbcType=VARCHAR},
            #{addrSign2,jdbcType=VARCHAR},
            '${contrastScore}',
            #{contrastId,jdbcType=VARCHAR},
            #{p2type,jdbcType=INTEGER},
            #{strScore,jdbcType=VARCHAR},
            #{numberScore,jdbcType=VARCHAR},
            #{oldName1,jdbcType=VARCHAR},
            #{oldPhone,jdbcType=VARCHAR},
            #{rowId,jdbcType=INTEGER},
            #{tableName,jdbcType=VARCHAR},
            #{countId,jdbcType=INTEGER},
            #{createTime,jdbcType=VARCHAR}
            )
    </insert>
    <insert id="insertDiscard" parameterType="com.dao.entity.lwaddress.Base_addr">
        insert   into discard_addr
        (id,addr_sj,short_addr, name1, phone,short_phone,province,pro_weight,id_card,earliest_time,latest_time,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,
        p2type,addr_sign1,addr_sign2,number_score,str_score,old_name1,old_phone,row_id,table_name,create_time)
        values
        (#{id,jdbcType=VARCHAR},
        #{addrSj,jdbcType=VARCHAR},
        #{shortAddr,jdbcType=VARCHAR},
        #{name1,jdbcType=VARCHAR},
        #{phone,jdbcType=VARCHAR},
        #{shortPhone,jdbcType=VARCHAR},
        #{province,jdbcType=VARCHAR},
        '${proWeight}',
        #{idCard,jdbcType=VARCHAR},
        #{earliestTime,jdbcType=VARCHAR},
        #{latestTime,jdbcType=VARCHAR},
        #{city,jdbcType=VARCHAR},
        '${cityWeight}',
        #{area,jdbcType=VARCHAR},
        '${areaWeight}',
        #{street,jdbcType=VARCHAR},
        '${streWeight}',
        '${mulWeight}',
        #{p2type,jdbcType=INTEGER},
        #{addrSign1,jdbcType=VARCHAR},
        #{addrSign2,jdbcType=VARCHAR},
        #{numberScore,jdbcType=VARCHAR},
        #{strScore,jdbcType=VARCHAR},
        #{oldName1,jdbcType=VARCHAR},
        #{oldPhone,jdbcType=VARCHAR},
        #{rowId,jdbcType=INTEGER},
        #{tableName,jdbcType=VARCHAR},
        #{createTime,jdbcType=VARCHAR}
        )
        <!--</foreach>-->
    </insert>
    <insert id="insertBaseAddr" parameterType="com.dao.entity.lwaddress.Base_addr" useGeneratedKeys="true" keyProperty="countId">
        insert   into base_addr
        (id,addr_sj, name1, phone,create_time,count_id,table_name)
        values
            (#{id,jdbcType=VARCHAR},
            #{addrSj,jdbcType=VARCHAR},
            #{name1,jdbcType=VARCHAR},
            #{phone,jdbcType=VARCHAR},
            #{createTime,jdbcType=VARCHAR},
            #{countId,jdbcType=VARCHAR},
            #{tableName,jdbcType=VARCHAR}
            )
    </insert>

    <select id="selectSum"  parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select count(*) from base_addr
  </select>

    <select id="selectByPhone" resultMap="BaseResultMap">
    select * from base_addr  order by mul_weight desc limit #{number1},#{number2}
  </select>
<!--
    and ifnull(phone,0)!=0 and ifnull(short_addr,"")!=""
-->


    <update id="truncateTable">
    truncate table ${tableName}
</update>

    <update id="updateMergeTable">
    update merge_addr set merge_addr.contrast_id=${contrast_id} where merge_addr.contrast_id=${id}
</update>


    <update id="function">
        UPDATE basics_addr AS ba,third_addr AS ta SET ba.longitude = ta.longitude,ba.latitude = ta.latitude
        WHERE ba.id = ta.id AND ba.count_id &gt;= #{start} AND ba.count_id &lt; #{end}
    </update>
    <update id="updateP5type">
         update insert_addr set p5type = 7 where id = #{id}
    </update>
    <update id="updateBasics" parameterType="com.dao.entity.lwaddress.Base_addr">
        update basics_addr set merge_num=#{mergeNum},latest_time=#{latestTime},earliest_time=#{earliestTime}  where id = #{id}
    </update>

    <delete id="deleteBasics" parameterType="com.dao.entity.lwaddress.Base_addr">
        DELETE FROM  basics_addr  WHERE basics_addr.id  in
        <foreach collection="list" item="item"  open="(" separator="," close=")">
            #{item.id,jdbcType=VARCHAR}
        </foreach>
    </delete>
    <delete id="deleteMergeById">
        delete from merge_addr where id = #{id}
    </delete>
    <delete id="deleteBasicsById">
                delete from basics_addr where id = #{id}
    </delete>
    <delete id="deleteBasicsNormal">
        delete from basics_addr_normal where id = #{id}
    </delete>
    <delete id="deleteMergeNormal">
        delete from merge_addr_normal where contrast_id = #{id}
    </delete>
    <select id="selectMsg" resultType="com.dto.vo.BaseAddrVo">
        SELECT
        id,
        name1,
        addr_sj as addrSj,
        phone,
        short_addr as shortAddr
        FROM
        basics_addr
        <where>
            <if test="phone != null and phone != ''" >
                and phone like #{phone}
            </if>
            <if test="name != null and name != ''" >
                and name1 like #{name}
            </if>
            <if test="length != null" >
                and CHAR_LENGTH(name1) = #{length}
            </if>
        </where>
    </select>

    <select id="selectMsg1" resultType="com.dto.vo.BaseAddrVo">
        SELECT
        id,
        name1,
        addr_sj as addrSj,
        phone,
        short_addr as shortAddr
        FROM
        basics_addr
        <where>
            <if test="phone != '' and phone != null" >
                and phone = #{phone}
            </if>
            <if test="name != '' and name != null" >
                and name1 = #{name}
            </if>
            <if test="length != null" >
                and CHAR_LENGTH(name1) = #{length}
            </if>
        </where>
    </select>
    <select id="getCity" resultType="com.dao.entity.lwaddress.Bs_city" parameterType="java.lang.String">
        SELECT
            CITY_CODE AS cityCode,
            PROVINCE_CODE AS provinceCode,
            CITY_NAME AS cityName,
            SHORT_NAME AS shortName
        FROM
            bs_city
        WHERE
            CITY_CODE = #{cityCode}
    </select>
    <select id="getProvince" resultType="com.dao.entity.lwaddress.Bs_province" parameterType="java.lang.String">
        SELECT
            PROVINCE_CODE AS provinceCode,
            PROVINCE_NAME AS provinceName,
            SHORT_NAME AS shortName
        FROM
            bs_province
        WHERE
            PROVINCE_CODE = #{code}
    </select>
    <select id="getArea" resultType="com.dao.entity.lwaddress.Bs_area" parameterType="java.lang.String">
        SELECT
            AREA_CODE AS areaCode,
            AREA_NAME AS areaName,
            b1.SHORT_NAME AS shortName,
            PROVINCE_CODE AS provinceCode,
            b1.CITY_CODE AS cityCode
        FROM
            bs_area b1
        INNER JOIN
            bs_city b2
        ON
            b1.CITY_CODE = b2.CITY_CODE
        WHERE
            b1.CITY_CODE = #{cityCode}
    </select>
    <select id="getStreetName" resultType="com.dao.entity.lwaddress.Bs_street" parameterType="java.lang.String">
        SELECT
            PROVINCE_CODE as provinceCode,
            b2.CITY_CODE as cityCode,
            bs_street.AREA_CODE as areaCode,
            STREET_CODE as streetCode,
            STREET_NAME as streetName,
            SHORT_NAME as shortName
        FROM
            bs_street
        INNER JOIN
        (
        SELECT PROVINCE_CODE,bs_area.CITY_CODE,AREA_CODE from bs_area inner join bs_city ON bs_area.CITY_CODE = bs_city.CITY_CODE WHERE AREA_CODE = #{code}
        ) b2 on bs_street.AREA_CODE= b2.AREA_CODE
    </select>
<!--    <select id="selectByAddress" resultMap="BaseResultMap" parameterType="com.dao.entity.lwaddress.Address">-->
<!--        SELECT * FROM basics_addr WHERE (street = #{street} AND area = #{area} AND city = #{city} AND province = #{province}) OR (street IS NULL AND area = #{area})-->
<!--        OR (street IS NULL AND area IS NULL AND city = #{city})-->
<!--        OR  (street IS NULL AND area IS NULL AND city IS NULL AND province = #{province})-->
<!--    </select>-->

    <select id="selectByAddress" resultMap="BaseResultMap" parameterType="com.dao.entity.lwaddress.Address">
        SELECT * FROM basics_addr WHERE
        <if test="street == null">
            street is null
        </if>
        <if test="street != null">
            street = #{street}
        </if>
    </select>

    <select id="searchContent" resultType="com.dto.vo.PersonMsgVo" parameterType="com.dto.form.SearchContentForm">
        SELECT
        id,
        name1 as name,
        phone as telNumber,
        addr_sj as address,
        short_addr as shortAddress,
        contrast_id as contrastId,
        province,
        city,
        area,
        street,
        short_addr as shortAddr
        FROM
        merge_addr
        where
        ( 1 = 1
        <foreach collection="tableData" item="item" index="index"  close=")" separator=" ">
            <if test="item.address != null">
                ${item.condition} addr_sj like concat('%',#{item.address},'%')
            </if>
            <if test="item.telNumber != null">
                ${item.condition} phone = #{item.telNumber}
            </if>
        </foreach>
        order by create_time DESC
        limit #{currentPage},#{pageSize}
    </select>
    <select id="searchMergeNum" resultType="java.lang.String" parameterType="java.lang.String">
        SELECT COUNT(1) FROM merge_addr WHERE contrast_id = #{id}
    </select>
    <select id="searchPeopleListByBasic" resultType="com.dto.vo.PersonMsgVo">
        SELECT id,name1 as name,phone as telNumber FROM lwaddr_standard.basics_addr WHERE id = #{id}
    </select>
    <select id="searchPeopleListByMerge" resultType="com.dto.vo.PersonMsgVo">
        SELECT id,name1 as name,phone as telNumber FROM lwaddr_standard.merge_addr WHERE contrast_id = #{id}
    </select>
    <select id="searchAddressList" resultType="com.dto.vo.PersonMsgVo">
         SELECT id,addr_sj as address,name1 as name,phone as telNumber FROM base_addr WHERE contrast_id = #{id} limit #{currentPage},#{pageSize}
    </select>
    <select id="searchMergeById" resultMap="BaseResultMap">
        SELECT * FROM merge_addr WHERE id = #{id}
    </select>
    <select id="searchBasicsById" resultMap="BaseResultMap">
        SELECT * FROM basics_addr WHERE id = #{id}
    </select>
    <select id="searchMergeKdNum" resultType="com.dto.vo.ChartData">
        SELECT
            COUNT(a.create_time) AS number,a.create_time as peopleTime
        FROM
        (
        SELECT
        concat(toString(toYear(toDateTime(ifNull(create_time,toString(now()))))),'-',toString(toMonth(toDateTime(ifNull(create_time,toString(now())))))) AS create_time
         FROM merge_addr WHERE
        create_time &gt; #{year}  AND contrast_id = #{id}
        ) AS a
        GROUP BY a.create_time
    </select>
    <select id="searchBasicsKdNum" resultType="com.dto.vo.ChartData">
        SELECT
            COUNT(a.create_time) AS number,a.create_time as peopleTime
        FROM
        (
        SELECT
            concat(toString(toYear(toDateTime(ifNull(create_time,toString(now()))))),'-',toString(toMonth(toDateTime(ifNull(create_time,toString(now())))))) AS create_time
         FROM basics_addr WHERE
        create_time &gt; #{year}  AND id = #{id}
        ) AS a
        GROUP BY a.create_time
    </select>
    <select id="searchBasicsByPhone" resultType="com.dto.vo.PersonMsgVo">
        SELECT id,addr_sj as address FROM basics_addr WHERE phone = #{phone}
    </select>
    <select id="searchAddressById" resultType="java.lang.String">
        SELECT addr_sj FROM basics_addr WHERE id = #{id}
    </select>
    <select id="searchMergeAcceptDelivery" resultType="com.dto.vo.AcceptDeliveryPeoperVo">
        SELECT
            name1 AS name,phone AS telNumber,ifNull(create_time,toString(now())) as specificDate
         FROM merge_addr WHERE
       ifNull(create_time,toString(now())) &gt; #{year} AND contrast_id = #{id}  AND ifNull(create_time,toString(now())) LIKE concat(#{time},'%')
    </select>
    <select id="searchBaiscAcceptDelivery" resultType="com.dto.vo.AcceptDeliveryPeoperVo">
        SELECT
            name1 AS name,phone AS telNumber,ifNull(create_time,toString(now())) as specificDate
         FROM basics_addr WHERE
        ifNull(create_time,toString(now())) &gt; #{year}  AND id = #{id} AND ifNull(create_time,toString(now())) LIKE concat(#{time},'%')
    </select>
    <select id="getTotal" resultType="java.lang.Long" parameterType="com.dto.form.SearchContentForm">
        SELECT
        count(*)
        FROM
        merge_addr
        where
        ( 1 = 1
        <foreach collection="tableData" item="item" index="index"  close=")" separator=" ">
            <if test="item.address != null and item.address != ''">
                ${item.condition} addr_sj like concat('%',#{item.address},'%')
            </if>
            <if test="item.telNumber != null and item.telNumber !=''">
                ${item.condition} phone = #{item.telNumber}
            </if>
        </foreach>
    </select>
    <select id="searchContrastIdByMerge" resultType="com.dto.vo.PersonMsgVo">
        SELECT id,name1 as name,phone as telNumber,contrast_id as contrastId FROM lwaddr_standard.merge_addr WHERE id = #{id}
    </select>
    <select id="searchPeopleListByContrastId" resultType="com.dto.vo.PersonMsgVo">
        SELECT id,name1 as name,phone as telNumber FROM lwaddr_standard.merge_addr WHERE contrast_id = #{id}
    </select>
    <select id="searchPeopleListByContrastIds" resultMap="BaseResultMap" parameterType="com.dto.vo.PersonMsgVo">
        select * from merge_addr where contrast_id in
        <foreach collection="list" item="item" index="index" open="("  close=")" separator=",">
            #{item.contrastId}
        </foreach>
    </select>
    <select id="searchBasicsMsg" resultMap="BaseResultMap" parameterType="com.dto.vo.PersonMsgVo">
        select * from basics_addr where id in
        <foreach collection="list" item="item" index="index" open="("  close=")" separator=",">
            #{item.contrastId}
        </foreach>
    </select>
    <select id="getTotalById" resultType="java.lang.Long">
         SELECT count(1) FROM base_addr WHERE contrast_id = #{id}
    </select>
    <select id="searchMergeNums" resultType="com.dao.entity.lwaddress.MergeNums" parameterType="com.dto.vo.PersonMsgVo">
        select contrast_id as id,count(1) as num from base_addr where contrast_id in
        <foreach collection="list" item="item" index="index" open="("  close=")" separator=",">
            #{item.id}
        </foreach>
         group by contrast_id
    </select>

    <select id="selectBaseAddr" resultMap="BaseResultMap">
        select * from basics_addr where
        <if test="streetName!=null">
            street = #{streetName}
        </if>
        <if test="streetName==null">
            street is null
        </if>
        and short_addr is not null
    </select>

    <select id="selectDataByPhone" resultMap="BaseResultMap">
        SELECT  id,addr_sj,short_addr,id_card,name1,id_card, phone,province,pro_weight,
        city,city_weight,area,area_weight,street,stre_weight,mul_weight,merge_num,earliest_time,latest_time,
        p3type,short_phone,old_name1,old_phone,row_id,table_name,count_id,create_time
        FROM sec_addr
        <where>
            <if test="phone != null">
                and phone = #{phone}
            </if>
            <if test="street != null">
                and (city = #{street} or city is null)
            </if>
        </where>
        order by mul_weight desc
    </select>
    <select id="selectData" resultMap="BaseResultMap">
        SELECT
            id,addr_sj,short_addr,id_card,name1,id_card, phone,province,pro_weight,
            city,city_weight,area,area_weight,street,stre_weight,mul_weight,
            p3type,short_phone,old_name1,old_phone,row_id,table_name,count_id,create_time
        FROM
            sec_addr
        WHERE
            p4type &lt;&gt; 100 and
            phone not like concat('%','*','%') and phone &lt;&gt; ''
        ORDER BY
            mul_weight DESC
        limit #{startCount},#{count}
    </select>
    <select id="getBaseAddrs" resultMap="BaseResultMap">
        SELECT  id,short_addr,phone,merge_num,earliest_time,latest_time,name1 FROM basics_addr where phone = #{phone}
    </select>
    <select id="getDate" resultMap="BaseResultMap">
        select * from basics_addr where short_phone = #{shortPhone}
        <if test="province != null and province != ''">
            and province = #{province}
        </if>
        <if test="city != null and city != ''">
            and city = #{city}
        </if>
        <if test="area != null and area != ''">
            and area = #{area}
        </if>
        <if test="street != null and street != ''">
            and street = #{street}
        </if>
    </select>

    <select id="getDate1" resultMap="BaseResultMap">
        select * from basics_addr
        <where>
            <if test="area != null and area != ''" >
                and area = #{area}
            </if>
            <if test="street != null and street != ''" >
                and (street = #{street} or street is null)
            </if>
            <if test="shortPhone != null and shortPhone != ''" >
                and short_phone = #{shortPhone}
            </if>
        </where>
    </select>
    <select id="getInsertDate" resultMap="BaseResultMap">
        select * from insert_addr where p5type &gt;= 0 and p5type &lt; 6 limit 5000000
    </select>
    <select id="getAllProvince" resultType="com.dao.entity.lwaddress.Bs_province">
        SELECT
        PROVINCE_CODE AS provinceCode,
        PROVINCE_NAME AS provinceName,
        SHORT_NAME AS shortName
        FROM
        bs_province
        WHERE
        PROVINCE_CODE &lt;&gt; '330000'
    </select>
    <select id="selectBaseAddrByStreet" resultMap="BaseResultMap">
        select * from basics_addr where
        <if test="streetName != null">
            street = #{streetName}
        </if>
        <if test="streetName == null">
            street is null
        </if>
        and short_addr is not null order by mul_weight desc
    </select>
    <select id="selectBaseAddr1" resultMap="BaseResultMap">
        select * from sec_addr
        <where>
        <if test="streetName != null">
            street = #{streetName}
        </if>
        and short_addr is not null
        </where>
         order by count_id LIMIT #{start},#{batchcCount}
    </select>



    <!--  此处是左右碰撞的右表数据(房屋标准表)，
    如需更改需碰撞的数据，只需切换表名就行 -->
    <select id="selectBaseAddr2" resultMap="BaseResultMap">
        select * from sec_addr
        <where>
            <if test="streetName != null">
                street = #{streetName}
            </if>
            and short_addr is not null
        </where>
    </select>
    <select id="selectCount" resultType="java.lang.Integer">
        select count(1) from sec_addr where
        <if test="streetName != null">
            street = #{streetName}
        </if>
        <if test="streetName == null">
            street is null
        </if>
        and short_addr is not null
    </select>
    <select id="selectBaseAddrByArea" resultMap="BaseResultMap">
        select * from basics_addr where  area = #{areaName} and street is null order by mul_weight desc
    </select>


    <!-- 此处是左右碰撞的左表数据(需碰撞的数据)，
    如需更改需碰撞的数据，只需切换表名就行 -->
    <select id="selectBaseAddrs" resultMap="BaseResultMap">
        select * from sec_addr where
        <if test="streetName!=null">
            street = #{streetName}
        </if>
        <if test="streetName==null">
            street is null
        </if>
        and short_addr is not null
        limit #{start},#{count}
    </select>
    <select id="selectMsg2" resultType="com.dto.vo.BaseAddrVo">
        SELECT
        id,
        name1,
        addr_sj as addrSj,
        phone,
        province,
        city,
        area,
        street,
        short_addr as shortAddr
        FROM
        basics_addr
        <where>
            <if test="area != null and area != ''" >
                and area = #{area}
            </if>
            <if test="street != null and street != ''" >
                and (street = #{street} or street is null)
            </if>
            <if test="shortPhone != null and shortPhone != ''" >
                and short_phone = #{shortPhone}
            </if>
        </where>
    </select>
    <select id="queryInfoById" resultType="com.dto.vo.BaseAddrVo">
        SELECT
          b.id,
          b.name1,
          b.addr_sj AS addrSj,
          b.phone,
          b.province,
          b.city,
          b.area,
          b.street,
          b.short_addr AS shortAddr,
          a.name1 AS oldName1,
          a.phone AS oldPhone
        FROM
          basics_addr AS b
        LEFT JOIN base_addr AS a
            ON b.id = a.id
        WHERE b.id = #{id}
    </select>
    <select id="queryMergeInfoById" resultType="com.dao.entity.lwaddress.BaseAddrByPhone" >
        select id,addr_sj AS addrSj,short_addr AS shortAddr,name1,id_card AS idCard,
               phone,province,city,AREA,street,merge_num AS mergeNum,earliest_time AS earliestTime,
               latest_time AS latestTime,longitude,latitude,contrast_id AS contrastId,old_phone AS oldPhone,
               old_name1 AS oldName1,create_time as createTime,
               CONCAT(IFNULL(`province`,''),IFNULL(`city`,''),IFNULL(`area`,''),IFNULL(`street`,''),IFNULL(`short_addr`,'')) AS address
               from merge_addr where  contrast_id = #{id} order by create_time DESC
    </select>
    <select id="queryBasicsMsgByPhone" resultType="com.dao.entity.lwaddress.BaseAddrByPhone">
        SELECT id,addr_sj AS addrSj,short_addr AS shortAddr,name1,id_card AS idCard,
       phone,province,city,AREA,street,merge_num AS mergeNum,earliest_time AS earliestTime,
       latest_time AS latestTime,longitude,latitude,contrast_id AS contrastId,old_phone AS oldPhone,
       old_name1 AS oldName1
        FROM basics_addr WHERE phone = #{phone}
    </select>
    <select id="queryMsgByPhone" resultType="com.dao.entity.lwaddress.BaseAddrByPhone" parameterType="java.lang.String">
        SELECT id,addr_sj AS addrSj,short_addr AS shortAddr,name1,id_card AS idCard,
               phone,province,city,AREA,street,merge_num AS mergeNum,earliest_time AS earliestTime,
               latest_time AS latestTime,longitude,latitude,contrast_id AS contrastId,old_phone AS oldPhone,
               old_name1 AS oldName1
        FROM basics_addr WHERE phone = #{phone}
        UNION
	(SELECT id,addr_sj AS addrSj,short_addr AS shortAddr,name1,id_card AS idCard,
       phone,province,city,AREA,street,merge_num AS mergeNum,earliest_time AS earliestTime,
       latest_time AS latestTime,longitude,latitude,contrast_id AS contrastId,old_phone AS oldPhone,
       old_name1 AS oldName1
        FROM merge_addr WHERE phone = #{phone})
        ORDER BY latestTime DESC
    </select>


</mapper>